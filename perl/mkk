#!/usr/bin/perl -w
# Computes a Kurucz model starting with input model file inmod for an input
# pair (Teff,logg) with the specified changes in micro and composition from
# that specified in inmod.
#
# Use     -- mkk teff logg [METALS=metals MICRO=micro, NAME=filename, 
#            ELE=deltaA ...]
#
# Example -- mkk 5777. 4.437  METALS=0.0 MICRO=1.0 NAME=test C=-0.2 O=-0.2
#
# C. Allende Prieto, written in Guildford, 2008
#                    modified to use ODF files with alpha enhancement for [Fe/H]<-1
#

use File::Copy;
use File::stat;

#0
#basic params #################################################################
$kurucz_dir=$ENV{KURUCZ};			# atlas dir
$kurucz_bin="$kurucz_dir/bin/atlas9mem_newodf.exe";	# atlas bin
$odf_dir="$kurucz_dir/ODF/NEW/";			# ODF, Rosseland kappa 
#$odf_dir="$kurucz_dir/odf/";
							# and molecular data dir
$molecules="$odf_dir/molecules.dat";				# molecular data 
							# (expected in $odf_dir)
$start_model_dir=$kurucz_dir."/models/";   # files 
							# from which the initial 
							# model is extracted 
$start_model_suf="k2odfnew.dat";			# suffix for initial 
							# model files
$ndepth=72;						# number of depths
#$mintau=-6.875;						# log10(min(tau_ross))
$mintau=-4.000;						# log10(min(tau_ross))
#$taustep=0.125;
$taustep=0.100;
$niter=15;						# niterations/block
$maxblocks=30;						# max. number of iteration
							# blocks (iter=blocks*niter)
$iprint=2;						# controls the output size 
@delta=(1.0,10.0);					# max. flux/flux derivative
							# error accepted (%)
@units=(5,7);						# units to save at the end
if($iprint>1){push(@units,13)};

#1
#basic data: chemical symbols and atomic numbers ##############################

@elements = (
      'H' ,'He','Li','Be','B' ,'C' ,'N' ,'O' ,'F' ,'Ne', 
      'Na','Mg','Al','Si','P' ,'S' ,'Cl','Ar','K' ,'Ca', 
      'Sc','Ti','V' ,'Cr','Mn','Fe','Co','Ni','Cu','Zn', 
      'Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y' ,'Zr', 
      'Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd','In','Sn', 
      'Sb','Te','I' ,'Xe','Cs','Ba','La','Ce','Pr','Nd', 
      'Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb', 
      'Lu','Hf','Ta','W' ,'Re','Os','Ir','Pt','Au','Hg', 
      'Tl','Pb','Bi','Po','At','Rn','Fr','Ra','Ac','Th', 
      'Pa','U' ,'Np','Pu','Am','Cm','Bk','Cf','Es');

$nelements=1;
foreach $entry (@elements){
	#$Znumber{$entry}=$nelements;
	$abu_changes{$entry}=0.0;
	$nelements++;
}
#get rid of the last one
$nelements--;

#2
#get atmospheric parameters from input line ###################################

$nparam=@ARGV;
if ($nparam < 2){die "At keast two input values (Teff and logg) are required\n"};
$teff=shift(@ARGV);
$logg=shift(@ARGV);
$micro=2.0; 	#default micro is 2.0
$feh=0.0;	#default metallicity is solar

#save this for later file renaming
$all_opts=join("",@ARGV);
if ($all_opts){$all_opts=".".$all_opts};
$all_opts =~ s/\=/\_/g;

#interpret the rest of the input (MICRO and abundance changes)
foreach $entry (@ARGV){
	@tmp=split("=",$entry);
	if($tmp[0] eq "NAME"){
		$name=$tmp[1];
	  }
	elsif($tmp[0] eq "MICRO"){
		#only 1.0 and 2.0 are admitted (odf files availability)
		if (abs($tmp[1]-1.0)<0.0001){
			$micro=$tmp[1];
			print "Requested micro is $micro\n";
		}else{
			warn "Microturbulence can only be 1.0 or 2.0 -- we use the default value of 2.0\n";
		}
	  }
	elsif($tmp[0] eq "METALS"){
			print "Requested METALS abundance change $entry \n";
			#all metal abundances could be changed with an
			#ABUNDANCE CHANGE statement, but we will use ABUNDANCE SCALE
#			for ($i=2; $i<=$nelements-1; $i++){
#		$abu_changes{$elements[$i]}=$abu_changes{$elements[$i]}+$tmp[1];
#			}
			$feh=$tmp[1];
	  }
	else{
			print "Requested abundance change $entry \n";
			#is this an integer
			if ($tmp[0] =~ /^\d+$/){
				print "we have an integer, presumably Z \n";
				print "$tmp[0] $elements[$tmp[0]-1] \n";
			#make sure it is not attempted to change NH/Ntot	
		if (($tmp[0]==1)&&(abs($tmp[1]) > 0.000000000)){die "The H abundance cannot be altered!\n"};
				$abu_changes{$elements[$tmp[0]-1]}=$abu_changes{$elements[$tmp[0]-1]}+$tmp[1];
			}else{  #if not, we probably have a symbol
				@gotcha=where(@elements,$tmp[0],CHAR);
				$gotcha=@gotcha;
				if ($gotcha > 1){
					print "-->$tmp[0]\n";
					die "Ambiguous element Symbol";
				}else{
					if ($gotcha < 1){
					print "-->$tmp[0]\n";
					die "Unmatched element Symbol";						
					}
				}
				print "We have a symbol: $tmp[0] $elements[$gotcha[0]] \n";
				#make sure it is not attempted to change NH/Ntot
				if (($tmp[0] eq "H")&&(abs($tmp[1]) > 0.000000000)){die "The H abundance cannot be altered!\n"};
				$abu_changes{$tmp[0]}=$abu_changes{$tmp[0]}+$tmp[1];
			}
	  }
}

#3
#assign nearest metallicity for odf and mean Rosseland kappa files ############
#also for the initizalization model
@kapfiles=<$odf_dir/kap???.ros>;
if (abs($micro-2.0)<0.0001){
	@bigfiles=<$odf_dir/???big2.bdf>;
	if ($feh<-1){
	    @bigfiles=<$odf_dir/???abig2.bdf>;
	}
}else{
	@bigfiles=<$odf_dir/???big1.bdf>;
	if ($feh<-1){
	    @bigfiles=<$odf_dir/???abig1.bdf>;
	}	
}
die "Cannot find appropriate bigfiles" unless @bigfiles;
@modfiles=<$start_model_dir/a???$start_model_suf>;

$distance=10.;
$match=0;
foreach $value (@kapfiles){
	$file = $value;
	$value =~ s/$odf_dir\/kap//g;
	$value =~ s/\.ros//g;
	$value =~ s/m/-/g;
	$value =~ s/p/+/g;
	$value = $value/10.;
	if(abs($value - $feh)<$distance){
		$distance=abs($value-$feh);
		$match=$file;
	}
}

if ($match){$kap=$match}else{die "Cannot assign a kap file\n"};
if ($distance>0){warn "Cannot find an exact match for the kap file\n"};
print "Best match for kap file is $kap with a distance $distance\n";

$distance=10.;
$match=0;
foreach $value (@bigfiles){
	$file = $value;
	$value =~ s/$odf_dir\///g;
	if (abs($micro-2.0) < 0.0001){
		if ($feh<-1){
	              $value =~ s/abig2\.bdf//g;
	        }else{
		      $value =~ s/big2\.bdf//g;
		}
	}else{
		if ($feh<-1){
	              $value =~ s/abig1\.bdf//g;
	        }else{
		      $value =~ s/big1\.bdf//g;
		}	}
	$value =~ s/m/-/g;
	$value =~ s/p/+/g;
	$value = $value/10.;
	if(abs($value - $feh)<$distance){
		$distance=abs($value-$feh);
		$match=$file;
	}
}


if ($match){$big=$match}else{die "Cannot assign a big file\n"};
if ($distance>0){warn "Cannot find an exact match in [Fe/H] for the big file\n"};
print "Best match for big file is $big with a distance $distance\n";

$distance=10.;
$match=0;
foreach $value (@modfiles){
	$file = $value;
	$value =~ s/$start_model_dir\/a//g;
	$value =~ s/$start_model_suf//g;
	$value =~ s/m/-/g;
	$value =~ s/p/+/g;
	$value = $value/10.;
	if(abs($value - $feh)<$distance){
		$distance=abs($value-$feh);
		$match=$file;
		#$feh_start_model=$value;
	}
}

if ($match){$mod=$match}else{die "Cannot assign a starting model file\n"};
if ($distance>0){warn "Cannot find an exact match in [Fe/H] for the starting model file\n"};
print "Best match for the starting model file is $mod with a distance $distance\n";

$distance=1.e5;
$match=0;
open(MOD,"$mod");
while (<MOD>){
	if (/TEFF/){
		@tmp=split;
		if(abs($tmp[1]-$teff) + abs($tmp[3]-$logg)<$distance){
			$distance=abs($tmp[1]-$teff) + abs($tmp[3]-$logg);
			$match=$tmp[1]." ".$tmp[3];
		}
	}
}
close(MOD);

if ($match){$start_model_pars=$match}else{die "Cannot assign a starting model\n"};
print "Best match for the starting model is $start_model_pars with a distance $distance\n";


#extract starting model
system($kurucz_dir."/perl/kget $mod $start_model_pars > fort.3");

#read Kurucz solar abundances from starting model
open(MOD,"fort.3") or die "Cannot open fort.3\n";
@solar=();
while (<MOD>){
	if (/ABUNDANCE/){
		if(/SCALE/){
			@tmp=split;
			#$abundance_scale=$tmp[2];
		}
		if(/CHANGE/){
			@tmp=split;
			@gotcha=where(@tmp,"CHANGE",CHAR);
			$gotcha=@gotcha;
			die "Unexpected ABUNDANCE CHANGE entry in fort.3\n" unless ($gotcha==1);
			$ntmp=@tmp;
			for ($i=$gotcha[0]; $i<$ntmp-1; $i=$i+2){
				#print "i is $i, $tmp[$i+1], $tmp[$i+2] \n";
				$solar[$tmp[$i+1]-1]=$tmp[$i+2];
			}
		}else{die "Unexpected ABUNDANCE entry in fort.3\n"};
	}
}
close(MOD);

#check that the numbers of elements in the tables and input model match 1-to-1
$nsolar=@solar;
die "nelements is $nelements but nsolar is $nsolar!\n" unless $nsolar==$nelements;
print "solar abundances are ",join(" ",@solar),"\n";

#check chemical composition for consistency
$Nz_over_Ntot=0.0;
for ($i=2; $i<=$nelements-1; $i++){
	$Nz_over_Ntot=$Nz_over_Ntot+10.**($solar[$i]+$feh+$abu_changes{$elements[$i]});
}
printf "Chemical composition NH/Ntot= %8.5f NHe/Ntot= %8.5f Nz/Ntot=%8.5f\n",$solar[0]*10.**($abu_changes{$elements[0]}),$solar[1]*10.**($abu_changes{$elements[1]}),$Nz_over_Ntot;
$totalabu=$solar[0]*10.**($abu_changes{"H"})+$solar[1]*10.**($abu_changes{"He"})+$Nz_over_Ntot;
printf "Chemical composition NH + NHe + Nz = %8.5f\n",$totalabu;
#adjust H to force (NH + NHe + Nz)/Ntot=1
$abu_changes{"H"}=$abu_changes{"H"}+log(1.0000000+(1.0000000-$totalabu)/$solar[0])/log(10.);
print  "Chemical composition --- NH adjusted to force (NH + NHe + Nz)/Ntot=1\n";
printf "Chemical composition NH/Ntot= %8.5f NHe/Ntot= %8.5f Nz/Ntot=%8.5f\n",$solar[0]*10.**($abu_changes{$elements[0]}),$solar[1]*10.**($abu_changes{$elements[1]}),$Nz_over_Ntot;
$totalabu=$solar[0]*10.**($abu_changes{"H"})+$solar[1]*10.**($abu_changes{"He"})+$Nz_over_Ntot;
printf "Chemical composition NH + NHe + Nz = %8.5f\n",$totalabu;


#check input data files are in place
stat("fort.3") or die "Cannot find the starting model fort.3\n";
%link_files=("fort.1" => $kap, "fort.9" => $big, "fort.2" => $molecules);
foreach $fort (keys %link_files){
	stat($link_files{$fort}) or die "Cannot link to input data file $link_files{$fort}\n";
	system("ln -s $link_files{$fort} $fort");
}

#print out info
print "Computing a Kurucz model for Teff=$teff and logg=$logg\n\n";

#write LTE initial madaf (fort.5) file
open(INPUT,">fort.5");
print  INPUT    "READ KAPPA               \n";
print  INPUT    "READ PUNCH               \n";
print  INPUT    "MOLECULES ON             \n";
print  INPUT    "READ MOLECULES\n";
print  INPUT    "FREQUENCIES 337 1 337 BIG\n";
printf INPUT   "VTURB %6.1e\n",$micro*1e5;
print  INPUT    "CONVECTION OVER 1.25 0\n";
print  INPUT    "TITLE test\n";
printf INPUT   "ABUNDANCE SCALE %9.5f ",10.**$feh;
printf INPUT   "ABUNDANCE CHANGE 1 %7.5f 2 %7.5f",$solar[0]*10.**($abu_changes{$elements[0]}),$solar[1]*10.**($abu_changes{$elements[1]});
$nn=7;
for ($i=2; $i<=$nelements-1; $i++){
	if ($nn==7){
		print INPUT "\n ABUNDANCE CHANGE";
		$nn=1;
	};
	printf INPUT " %2d %6.2f",$i+1,$solar[$i]+$abu_changes{$elements[$i]};
	$nn++;
}
print  INPUT "\n";
printf INPUT "SCALE %2d %6.3f %5.3f %7.0f %4.2f\n",$ndepth,$mintau,$taustep,$teff,$logg;
printf INPUT "ITERATIONS %2d  PRINT",$niter;
for ($i=1; $i<$niter; $i++){
	printf INPUT " %1d",0;
}
printf INPUT " %1d \nPUNCH",$iprint;
for ($i=1; $i<$niter; $i++){
	printf INPUT " %1d",0;
}
printf INPUT " %1d \n",$iprint;
print  INPUT "BEGIN                    ITERATION  10 COMPLETED\n";
print  INPUT "END\n";
close(INPUT);

#run atlas
@errors=(1e3,1e3);
$block=1;
print "Running Atlas9 -- block $block -- $niter iterations ...\n";
$atlas_err=system("$kurucz_bin < fort.5 > fort.99");
if($atlas_err){die "$kurucz_bin did not run successfully!\n"};
#check convergency (extract @errors)
check();

#split fluxes and structure, if both in fort.7
if($iprint>1){split_fort7()};

while (($errors[0]>$delta[0] || $errors[1]>$delta[1])&&($block<=$maxblocks)){

	copy("fort.7","fort.3");
	unlink("fort.7");
	$block++;

	print "Running Atlas9 -- block $block -- $niter iterations ...\n";
	$atlas_err=system("$kurucz_bin < fort.5 > fort.99");
	if($atlas_err){die "$kurucz_bin did not run successfully!\n"};

	#check convergency
	check();

	#split fluxes and structure, if both in fort.7
	if($iprint>1){split_fort7()};
}


if ($block>=$maxblocks){die "Model did not converge in $block blocks of $niter iterations, I quit!\n"}else{

	#backing up model
	foreach $number (@units){
		$input="fort.$number";
		if($name){
			$output="$name.$number";
		}else{
			$output="k$teff"."_"."$logg$all_opts.$number";
		}
		copy($input,$output) or die "copying $input -> $output failed: $!";
		print "Output to file $output\n";
	}
}	

#clean up
cleanup();

#the end
print "done\n";

#################################################################################################
sub check{
#check convergency log
open(CONV,"tail -$ndepth fort.99 |");
@errors=(0.0,0.0);
$i=0;
while(<CONV>){
	chomp;
	$line=$_;
	if (/NAN/){
		cleanup();
		die "Numerical breakdown (NaNs): Model did not converge\n";
	}
	@tmp=split(' ',$line);
	$id=$tmp[0];
 	@max=($tmp[11],$tmp[12]);
	if(abs($max[0])>$errors[0]){$errors[0]=abs($max[0]);$i=$id};
	if(abs($max[1])>$errors[1]){$errors[1]=abs($max[1]);$i=$id};
}
close(CONV);
if (($errors[0]<$delta[0])&&($errors[1]<$delta[1])){
	print " --- Convergence: max changes are $errors[0] and $errors[1] at depth $i\n"
}else{
	print " --- Model has not yet converged: max(errors)=",join(" ",@errors),"\n";
}
}
#################################################################################################
sub cleanup{
#cleanup fort.* and tas files
@forts=glob("fort.*") or die "Cannot rm fort files: they don't exist";
foreach $filename (@forts){unlink ($filename) or die "Cant delete $filename: $!\n"};
}
#################################################################################################
sub where{

my(@a);
my($pattern);
my($i);
my(@index);
my($tol);
@a=@_;
$tol=pop(@a);
$pattern=pop(@a);
$i=0;
for $_ (@a){
	if ($tol eq "CHAR"){if($a[$i] eq $pattern){push(@index,$i)}}else{
	if(abs($a[$i]-$pattern)<= $tol){push(@index,$i)};
	}
$i++;
}
return(@index);
}

#################################################################################################
sub split_fort7{


unlink("fort.7o");
copy("fort.7","fort.7o");
open(OLDUNIT7,"fort.7o");
open(UNIT13,"> fort.13");
open(UNIT7,"> fort.7");
$header_lines=1;
while (<OLDUNIT7>){
	if(($header_lines) or (/FLUX/)){
		print UNIT13;
		if (/FLUX/){$header_lines=0};
	}else{print UNIT7};
	$i++;
}
close(OLDUNIT7);
close(UNIT7);
close(UNIT13);
}
#################################################################################################
